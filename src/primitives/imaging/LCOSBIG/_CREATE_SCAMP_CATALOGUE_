# -*-cperl-*-

=head1 NAME

_CREATE_SCAMP_CATALOGUE__ - perform source extraction and create
SCAMP-compatible input file.

=head1 DESCRIPTION

For the group file, find all the sources and calculate the flux
of each detected source. Write the results to a catalogue file.

=head1 ARGUMENTS

=over 4

=item GROUP = BOOLEAN (Given)

If true, use the current group file for source extraction. If false, use
the current frame. [0]

=head1 NOTES

=over 4

=item *

Currently uses SEXTRACTOR for source extraction and for photometry.

=back

=head1 REQUIRED PERL MODULES

Starlink::Extractor, Astro::WaveBand, Astro::Catalog.

=head1 AUTHOR

Tim Lister <tlister@lcogt.net>

=head1 COPYRIGHT

Copyright (C) 2014 Las Cumbres Observatory Global Telescope Inc.
All Rights Reserved.

=cut
use File::Copy;
use Data::Dumper;

# Do only if it's time to create a catalogue.
if( $Frm->uhdr("CREATE_CATALOGUE") ) {

# Get the input NDF.
  my $in;
  my $group = $_CREATE_SCAMP_CATALOGUE_{GROUP};
  if( defined( $_CREATE_SCAMP_CATALOGUE_{GROUP} ) &&
      $_CREATE_SCAMP_CATALOGUE_{GROUP} == 0 ) {

    orac_throw "Cannot handle more than one file per Frame object\n" if ( $Frm->nfiles > 1 );

    ( $in, my $out ) = $Frm->inout( "_cat" );
    $group = $_CREATE_SCAMP_CATALOGUE_{GROUP};
  } else {
    $in = $Grp->file;
    $group = 1;
  }

# Delay loading so that ORAC-DR does not require these.
  require Starlink::Extractor;

# Obtain the detection sigma level.
  my $detect = ( $_CREATE_SCAMP_CATALOGUE_{DETECT_SIGMA} || 4.0 );

# Obtain the minimum number of pixels in the objects.
  my $minpix = ( $_CREATE_SCAMP_CATALOGUE_{MINPIX} || 12 );

# Obtain the filter.
  my $filter = $Frm->uhdr("ORAC_FILTER");
  
# Write fake filter value with non-colliding name header name
  _SET_FILE_FITS_ITEM_ FILE=$in KEY=L1FILTER VALUE=$filter, COMMENT=Filter|for|SCAMP

# Obtain pixelscale.
  _GET_PLATE_SCALE_
  my $platescale = ( $_GET_PLATE_SCALE_{PLATESCALE} || 0 );

# Obtain gain.
  _GET_GAIN_
  my $gain = ( $_GET_GAIN_{GAIN} || 1.0 );

# Obtain saturation level
  _GET_SATURATION_LEVEL_
  my $saturlevel = $_GET_SATURATION_LEVEL_{SATURATION};

# Obtain FWHM
  my $fwhm = 1.5;
  my $dqc = eval { $Cal->dqc };
  if ( !$@ ) {
    my $dqc = $Cal->dqc;
# Dereference row/hash reference of DQC params
    $fwhm = $dqc->{'FWHM'};
# If seeing is <= 0 (-99 or exactly 0.00), set a default
    if ( $fwhm <= 0 ) {
      $fwhm = 1.5;
    }
  }

# Report the processing status.
  orac_print "Detecting objects in $in with at least $minpix connected pixels\n";
  orac_print "   at $detect times sky noise above sky.\n";

# Assemble new frame-specific config file.
  my $conf_file = $Cal->find_file("extractor_catalogue.sex");

  my $extractor = new Starlink::Extractor( config => $conf_file );
  $extractor->detect_thresh( $detect );
  $extractor->analysis_thresh( $detect );
  $extractor->verbose_type('QUIET');

  $extractor->pixel_scale($platescale);
  $extractor->satur_level($saturlevel);
  $extractor->gain($gain);
  $extractor->seeing_fwhm($fwhm);
  $extractor->catalog_type('FITS_LDAC');
  $extractor->catalog_name('scamp_cat.ldac');
# Split the full path of the found SExtractor config file into volume (N/A on 
# Unix) and directory path so we know where to locate the companion SExtractor
# param file
  (my $volume, my $directories, my $conf_filename) = File::Spec->splitpath( $conf_file );
  print "Directories, conf_filename=" .  $directories, $conf_filename . "\n";
  my $params_file = File::Spec->catpath($volume, $directories, 'extractor_catalogue_scamp.param');
  print "params_file=" . $params_file . "\n";

  $extractor->parameters_name($params_file);
  $extractor->_write_config_temp_file;

# Perform inventory on the field
  $conf_file = $extractor->_config_file_name;
  my $param1 = "image=$in config=$conf_file";
  orac_print "Running extractor, image=$in, config file=$conf_file\n";

# Derive an inventory of the images in $resfile.
  my $extractor_status = $Mon{ "extractor" }->obeyw( "extract", "$param1" );

# We can handle a failure here by making a null ARD file.  So we test a
# local status rather than let ORAC go on to the next file.
  if ( $extractor_status == ORAC__OK ) {
    my $extracted_catalog = 'scamp_cat.ldac';

    my $catalogue_name = $in;
    if ( $Frm->uhdr( "QUICK_LOOK" ) == 1 ) {
      $catalogue_name =~ s/00_bp_ff/09_cat.ldac/;
    } else {
      $catalogue_name =~ s/00_bp_ff/89_cat.ldac/;
    }

    my $cat_file = File::Spec->catfile($ENV{'ORAC_DATA_OUT'}, $catalogue_name);
#  my $status = $filtered_catalog->write_catalog( file => $cat_file,
#                                                 format => $output_format,
#                                               );

    rename( $extracted_catalog, $cat_file ) ||
      orac_throw "Cannot rename  $extracted_catalog to $cat_file\n";
    orac_print "Wrote SCAMP catalogue to $cat_file.\n\n";
  }
# Remove temporary files.
#  $extractor->_delete_config_temp_file;
#  $extractor->_delete_param_temp_file;
#  $extractor->_delete_catalog_temp_file;
}
